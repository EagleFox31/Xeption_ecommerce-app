name of the function : "assign_sku_from_category" 
"
DECLARE
  prefix text;
BEGIN
  -- Si le SKU est déjà renseigné manuellement, ne rien faire
  IF NEW.sku IS NOT NULL THEN
    RETURN NEW;
  END IF;

  -- Récupère le préfixe associé à la catégorie
  SELECT prefix INTO prefix
  FROM category_sku_prefix
  WHERE category_id = NEW.category_id;

  IF prefix IS NULL THEN
    RAISE EXCEPTION 'Aucun prefix SKU défini pour category_id %', NEW.category_id;
  END IF;

  -- Génère et assigne le SKU
  NEW.sku := get_next_sku(prefix);
  RETURN NEW;
END;
"

name of the function : "check_technician_availability" 
"
DECLARE
  requested_date date;
  technician_id uuid;
  availability time[];
BEGIN
  requested_date := NEW.preferred_date;
  technician_id := NEW.created_by; -- ou récupérer via mapping de l’équipe

  SELECT available_hours
  INTO availability
  FROM technician_availability
  WHERE technician_id = technician_id AND available_date = requested_date;

  IF availability IS NULL THEN
    RAISE EXCEPTION 'Aucun créneau disponible pour la date % (technicien %)', requested_date, technician_id;
  END IF;

  RETURN NEW;
END;
"
name of the function : "gen_sku_for_products"
"
DECLARE
  seq_no bigint;
  pfx     text;
BEGIN
  -- on prend le code déjà stocké
  SELECT c.sku_prefix INTO pfx
    FROM public.categories c
   WHERE c.id = NEW.category_id;

  UPDATE public.sku_counters
     SET last_seq = last_seq + 1
   WHERE prefix = pfx
   RETURNING last_seq INTO seq_no;

  NEW.sku := pfx || '-' || lpad(seq_no::text,4,'0');
  RETURN NEW;
END;
"
name of the function : "get_next_sku"
"
DECLARE
  next_seq bigint;
BEGIN
  -- Verrou exclusif sur la ligne du préfixe
  UPDATE sku_counters
  SET last_seq = last_seq + 1
  WHERE prefix = get_next_sku.prefix
  RETURNING last_seq INTO next_seq;

  -- Si le préfixe n'existe pas encore, on le crée
  IF NOT FOUND THEN
    INSERT INTO sku_counters(prefix, last_seq)
    VALUES (prefix, 1)
    RETURNING last_seq INTO next_seq;
  END IF;

  -- Retourne un SKU formaté (ex: LAP-0000123)
  RETURN prefix || '-' || LPAD(next_seq::text, 7, '0');
END;
"
name of the function : "update_product_has_variants"
"
DECLARE
  variant_count integer;
BEGIN
  -- Compte les variantes du produit concerné
  SELECT COUNT(*) INTO variant_count
  FROM product_variants
  WHERE product_id = COALESCE(NEW.product_id, OLD.product_id);

  -- Met à jour le produit en fonction du résultat
  UPDATE products
  SET has_variants = (variant_count > 0)
  WHERE id = COALESCE(NEW.product_id, OLD.product_id);

  RETURN NULL;
END;
"
name of the function : "trg_update_specs_cache"
"
BEGIN
  PERFORM refresh_product_specs_cache(NEW.product_id);
  RETURN NEW;
END;
"
name of the function : "trg_log_backorder_notification"
"
BEGIN
  IF NEW.notification_sent = true AND OLD.notification_sent = false THEN
    INSERT INTO public.back_order_notifications (
      back_order_id, product_id, notified_by
    )
    VALUES (
      NEW.id,
      (SELECT id FROM products WHERE sku = NEW.product_ref LIMIT 1), -- hypothèse : SKU utilisé comme ref
      current_setting('app.user_id', true)::uuid
    );
  END IF;
  RETURN NEW;
END;
"
name of the function : "sync_i18n_descriptions"
"
DECLARE
  i18n jsonb;
BEGIN
  SELECT jsonb_object_agg(locale, to_jsonb(row))
  INTO i18n
  FROM (
    SELECT locale, title, short_desc, long_desc, details_json
    FROM product_descriptions
    WHERE product_id = NEW.product_id
  ) row;

  UPDATE products
  SET i18n_descriptions = i18n
  WHERE id = NEW.product_id;

  RETURN NEW;
END;
"
name of the function : "recalculate_product_stock"
"
DECLARE
  stock integer;
BEGIN
  SELECT COALESCE(SUM(stock_qty), 0)
  INTO stock
  FROM product_variants
  WHERE product_id = productId;

  UPDATE products
  SET stock_qty = stock
  WHERE id = productId;
END;
"
name of the function : "refresh_product_specs_cache"
"
DECLARE
  specs jsonb;
  features jsonb;
BEGIN
  -- Agréger les specs
  SELECT jsonb_object_agg(label, value)
  INTO specs
  FROM product_specifications
  WHERE product_specifications.product_id = refresh_product_specs_cache.product_id;

  -- Agréger les features
  SELECT jsonb_agg(jsonb_build_object(
    'title', title,
    'icon', icon_url,
    'highlight', highlight
  ))
  INTO features
  FROM product_features
  WHERE product_features.product_id = refresh_product_specs_cache.product_id;

  -- Mise à jour du cache dans products.specs
  UPDATE products
  SET specs = jsonb_build_object(
    'specifications', COALESCE(specs, '{}'),
    'features', COALESCE(features, '[]'::jsonb)
  )
  WHERE id = product_id;
END;
"
name of the function : "log_audit_event"
"
DECLARE
  uid uuid := current_setting('app.user_id', true)::uuid;
BEGIN
  INSERT INTO audit_logs (
    user_id, action, table_name, record_id, before_state, after_state
  )
  VALUES (
    uid,
    TG_OP,
    TG_TABLE_NAME,
    COALESCE(NEW.id::text, OLD.id::text),
    to_jsonb(OLD),
    to_jsonb(NEW)
  );
  RETURN NEW;
END;
"
name of the function : "set_updated_at"
"
begin
  new.updated_at := now();
  return new;
end 
"

ENUMS : 

enum BackOrderStatusEnum {
  open
  sourced
  ordered
  cancelled
}

enum BatteryStateEnum {
  excellent
  good
  average
  poor
  dead
}

enum BudgetStatusEnum {
  open
  in_consult
  closed
}

enum InventoryReasonEnum {
  purchase
  return
  manual
  sale
  adjust
}

enum OrderStatusEnum {
  new
  processing
  shipped
  delivered
  cancelled
}

enum PaymentMethodEnum {
  om
  momo
  card
  cash
  paypal
}

enum PaymentStatusEnum {
  pending
  paid
  failed
  refunded
}

enum PhysicalConditionEnum {
  perfect
  good
  fair
  broken
}

enum ProductTierEnum {
  entry
  standard
  premium
  pro
}

enum RepairStatusEnum {
  scheduled
  in_progress
  done
  cancelled
}

enum RfqStatusEnum {
  new
  answered
  won
  lost
  draft
  submitted
  under_review
  quoted
  rejected
  approved
  closed
}

enum TradeStatusEnum {
  pending
  quoted
  accepted
  rejected
}

enum UserRole {
  client
  agent
  admin
}

Index à créer:

CREATE UNIQUE INDEX addresses_pkey ON public.addresses USING btree (id)
CREATE UNIQUE INDEX audit_logs_pkey ON public.audit_logs USING btree (id)
CREATE UNIQUE INDEX back_order_notifications_pkey ON public.back_order_notifications USING btree (id)
CREATE INDEX back_order_status ON public.back_orders USING btree (status, created_at DESC)
CREATE UNIQUE INDEX back_orders_pkey ON public.back_orders USING btree (id)
CREATE INDEX banner_search ON public.marketing_banners USING gin (search_vector)
CREATE UNIQUE INDEX brands_name_key ON public.brands USING btree (name)
CREATE UNIQUE INDEX brands_pkey ON public.brands USING btree (id)
CREATE UNIQUE INDEX brands_slug_key ON public.brands USING btree (slug)
CREATE INDEX budget_adv_status ON public.budget_advisories USING btree (status, created_at DESC)
CREATE UNIQUE INDEX budget_advisories_pkey ON public.budget_advisories USING btree (id)
CREATE UNIQUE INDEX cart_items_pkey ON public.cart_items USING btree (id)
CREATE UNIQUE INDEX carts_pkey ON public.carts USING btree (user_id)
CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id)
CREATE UNIQUE INDEX categories_slug_key ON public.categories USING btree (slug)
CREATE UNIQUE INDEX category_brands_pkey ON public.category_brands USING btree (category_id, brand_id)
CREATE UNIQUE INDEX category_sku_prefix_pkey ON public.category_sku_prefix USING btree (category_id)
CREATE UNIQUE INDEX category_sku_prefix_prefix_key ON public.category_sku_prefix USING btree (prefix)
CREATE UNIQUE INDEX cities_name_region_id_key ON public.cities USING btree (name, region_id)
CREATE UNIQUE INDEX cities_pkey ON public.cities USING btree (id)
CREATE UNIQUE INDEX communes_name_city_id_key ON public.communes USING btree (name, city_id)
CREATE UNIQUE INDEX communes_pkey ON public.communes USING btree (id)
CREATE UNIQUE INDEX deliveries_pkey ON public.deliveries USING btree (id)
CREATE INDEX deliveries_region_city ON public.deliveries USING btree (region_id, city_id)
CREATE UNIQUE INDEX deliveries_pkey ON public.deliveries USING btree (id)
CREATE INDEX idx_addresses_city_id ON public.addresses USING btree (city_id)
CREATE INDEX idx_addresses_commune_id ON public.addresses USING btree (commune_id)
CREATE INDEX idx_addresses_region_id ON public.addresses USING btree (region_id)
CREATE INDEX idx_addresses_region_id ON public.addresses USING btree (region_id)
CREATE INDEX idx_addresses_user_id ON public.addresses USING btree (user_id)
CREATE INDEX idx_back_orders_user_id ON public.back_orders USING btree (user_id)
CREATE INDEX idx_brands_slug ON public.brands USING btree (slug)
CREATE INDEX idx_budget_advisories_user_id ON public.budget_advisories USING btree (user_id)
CREATE INDEX idx_cart_items_cart_user_id ON public.cart_items USING btree (cart_user_id)
CREATE INDEX idx_cart_items_product_id ON public.cart_items USING btree (product_id)
CREATE INDEX idx_cart_items_variant_id ON public.cart_items USING btree (variant_id)
CREATE INDEX idx_carts_user_id ON public.carts USING btree (user_id)
CREATE INDEX idx_cat_brands_brand ON public.category_brands USING btree (brand_id)
CREATE INDEX idx_categories_slug ON public.categories USING btree (slug)
CREATE INDEX idx_deliveries_city_id ON public.deliveries USING btree (city_id)
CREATE INDEX idx_deliveries_commune_id ON public.deliveries USING btree (commune_id)
CREATE INDEX idx_deliveries_region_id ON public.deliveries USING btree (region_id)
CREATE INDEX idx_inventory_logs_actor_id ON public.inventory_logs USING btree (actor_id)
CREATE INDEX idx_marketing_banners_category_id ON public.marketing_banners USING btree (category_id)
CREATE INDEX idx_marketing_banners_search_vector ON public.marketing_banners USING gin (search_vector)
CREATE INDEX idx_order_items_order_id ON public.order_items USING btree (order_id)
CREATE INDEX idx_order_items_product_id ON public.order_items USING btree (product_id)
CREATE INDEX idx_order_items_variant_id ON public.order_items USING btree (variant_id)
CREATE INDEX idx_orders_user_id ON public.orders USING btree (user_id)
CREATE INDEX idx_product_features_product_id ON public.product_features USING btree (product_id)
CREATE INDEX idx_product_series_slug ON public.product_series USING btree (slug)
CREATE INDEX idx_product_specifications_product_id ON public.product_specifications USING btree (product_id)
CREATE INDEX idx_products_brand ON public.products USING btree (brand_id)
CREATE INDEX idx_products_brand_id ON public.products USING btree (brand_id)
CREATE INDEX idx_products_category_id ON public.products USING btree (category_id)
CREATE INDEX idx_products_price_xaf ON public.products USING btree (price_xaf)
CREATE INDEX idx_products_search_vector ON public.products USING gin (search_vector)
CREATE INDEX idx_products_series_id ON public.products USING btree (series_id)
CREATE UNIQUE INDEX idx_products_sku ON public.products USING btree (sku)
CREATE INDEX idx_products_slug ON public.products USING btree (slug)
CREATE INDEX idx_repair_jobs_status ON public.repair_jobs USING btree (status)
CREATE INDEX idx_repair_jobs_user_id ON public.repair_jobs USING btree (user_id)
CREATE INDEX idx_rfq_items_category_id ON public.rfq_items USING btree (category_id)
CREATE INDEX idx_rfq_items_rfq_id ON public.rfq_items USING btree (rfq_id)
CREATE INDEX idx_trade_in_photos_trade_in_id ON public.trade_in_photos USING btree (trade_in_id)
CREATE INDEX idx_trade_ins_user_id ON public.trade_ins USING btree (user_id)
CREATE UNIQUE INDEX inventory_logs_pkey ON public.inventory_logs USING btree (id)
CREATE INDEX invlogs_product_time ON public.inventory_logs USING btree (product_id, created_at DESC)
CREATE UNIQUE INDEX marketing_banners_pkey ON public.marketing_banners USING btree (id)
CREATE UNIQUE INDEX order_items_pkey ON public.order_items USING btree (id)
CREATE INDEX order_items_product_variant ON public.order_items USING btree (product_id, variant_id)                                                                                         
CREATE UNIQUE INDEX orders_pkey ON public.orders USING btree (id)
CREATE UNIQUE INDEX product_descriptions_pkey ON public.product_descriptions USING btree (product_id, locale)
CREATE UNIQUE INDEX product_features_pkey ON public.product_features USING btree (id)
CREATE UNIQUE INDEX product_images_pkey ON public.product_images USING btree (id)
CREATE UNIQUE INDEX product_series_pkey ON public.product_series USING btree (id)
CREATE UNIQUE INDEX product_series_slug_key ON public.product_series USING btree (slug)
CREATE UNIQUE INDEX product_specifications_pkey ON public.product_specifications USING btree (id)
CREATE UNIQUE INDEX product_variant_values_pkey ON public.product_variant_values USING btree (variant_id, attribute_id)
CREATE UNIQUE INDEX product_variants_pkey ON public.product_variants USING btree (id)
CREATE UNIQUE INDEX product_variants_product_id_variant_key_key ON public.product_variants USING btree (product_id, variant_key)
CREATE INDEX products_gin_search ON public.products USING gin (search_vector)
CREATE UNIQUE INDEX products_pkey ON public.products USING btree (id)
CREATE INDEX products_price_cat ON public.products USING btree (category_id, price_xaf)
CREATE UNIQUE INDEX products_sku_key ON public.products USING btree (sku)
CREATE UNIQUE INDEX products_slug_key ON public.products USING btree (slug)
CREATE UNIQUE INDEX promotions_pkey ON public.promotions USING btree (id)
CREATE UNIQUE INDEX regions_name_key ON public.regions USING btree (name)
CREATE UNIQUE INDEX regions_pkey ON public.regions USING btree (id)
CREATE UNIQUE INDEX repair_jobs_pkey ON public.repair_jobs USING btree (id)
CREATE UNIQUE INDEX rfq_items_pkey ON public.rfq_items USING btree (id)
CREATE UNIQUE INDEX rfq_requests_pkey ON public.rfq_requests USING btree (id)
CREATE INDEX rfq_status_time ON public.rfqs USING btree (status, created_at DESC)
CREATE UNIQUE INDEX rfqs_pkey ON public.rfqs USING btree (id)
CREATE UNIQUE INDEX settings_pkey ON public.settings USING btree (key)
CREATE UNIQUE INDEX sku_counters_pkey ON public.sku_counters USING btree (prefix)
CREATE UNIQUE INDEX technician_availability_pkey ON public.technician_availability USING btree (technician_id, available_date)
CREATE UNIQUE INDEX trade_in_photos_pkey ON public.trade_in_photos USING btree (id)
CREATE UNIQUE INDEX trade_ins_pkey ON public.trade_ins USING btree (id)
CREATE UNIQUE INDEX unique_cart_user_product_variant ON public.cart_items USING btree (cart_user_id, product_id, variant_id)
CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email)
CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id)
CREATE UNIQUE INDEX variant_attributes_name_key ON public.variant_attributes USING btree (name)
CREATE UNIQUE INDEX variant_attributes_pkey ON public.variant_attributes USING btree (id)
CREATE UNIQUE INDEX variant_attributes_slug_key ON public.variant_attributes USING btree (slug)
CREATE UNIQUE INDEX variant_values_attribute_id_value_key ON public.variant_values USING btree (attribute_id, value)
CREATE UNIQUE INDEX variant_values_pkey ON public.variant_values USING btree (id)
